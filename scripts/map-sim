#!/bin/bash

if [ $# -ne 5 ];
then
    echo "usage: "$(basename $0) "[output-dir] [fasta-ref] [vg-ref] [vg-pan] [num-reads]"
    exit
fi

output=$1
fasta=$2
ref=$3
pan=$4
num_reads=$5

pan_xg=$pan.xg
pan_gcsa=$pan.gcsa
ref_xg=$ref.xg
ref_gcsa=$ref.gcsa

mkdir -p $output

# Get the vg id
id=$(vg version | cut -f 3 -d- | tail -c 8 | head -c 7)
echo testing vg-$id

# Generate 500k read pairs (1M reads) and their "true" positions from the vg graph:
echo generating simulated reads
time vg sim -s 271 -n $num_reads -e 0.01 -i 0.002 -l 150 -p 500 -v 50 -x $pan_xg -a | tee $output/sim.gam | vg annotate -p -x $pan_xg -a - | vg view -a - | jq -c -r '[ .name, .refpos[0].name, .refpos[0].offset ] | @tsv' | pv -l | sort >$output/true.pos

# This can then be mapped six ways.

# By bwa:
# first split the file into the mates
vg view -a $output/sim.gam | jq -cr 'select(.name | test("_1$"))' | pv -l | vg view -JaG - | vg view -X - | sed s/_1$// | gzip >$output/sim_1.fq.gz
vg view -a $output/sim.gam | jq -cr 'select(.name | test("_2$"))' | pv -l | vg view -JaG - | vg view -X - | sed s/_2$// | gzip >$output/sim_2.fq.gz
# then map, correcting the names so they match vg's
echo bwa mem paired mapping
time bwa mem -t 32 $fasta $output/sim_1.fq.gz $output/sim_2.fq.gz | grep -v ^@ | perl -ne '@val = split("\t", $_); print @val[0] . "_" . (@val[1] & 64 ? "1" : @val[1] & 128 ? "2" : "?"), "\t" . @val[2] . "\t" . @val[3] . "\t" . @val[4] . "\n";' | pv -l | sort >$output/bwa_mem-pe.pos
join $output/true.pos $output/bwa_mem-pe.pos | ~/vg/scripts/pos_compare.py >$output/bwa-pe.compare
# map single end
echo bwa mem single mapping
time bwa mem -t 32 $fasta <(vg view -X $output/sim.gam) | grep -v ^@ | pv -l | cut -f 1,3,4,5 | sort >$output/bwa_mem-se.pos
join $output/true.pos $output/bwa_mem-se.pos | ~/vg/scripts/pos_compare.py >$output/bwa-se.compare

# By vg-ref:
echo vg ref paired mapping
time vg map -iG $output/sim.gam -x $ref_xg -g $ref_gcsa -t 32 | vg annotate -x $ref_xg -p -a - | vg view -a - | pv -l | jq -c -r '[.name, .refpos[0].name, .refpos[0].offset, if .mapping_quality == null then 0 else .mapping_quality end ] | @tsv'  | sed s/null/0/g | sort >$output/vg-ref-pe.pos
join $output/true.pos $output/vg-ref-pe.pos | ~/vg/scripts/pos_compare.py >$output/vg-ref-pe.compare
echo vg ref single mapping
time vg map -G $output/sim.gam -x $ref_xg -g $ref_gcsa -t 32 | vg annotate -x $ref_xg -p -a - | vg view -a - | pv -l | jq -c -r '[.name, .refpos[0].name, .refpos[0].offset, if .mapping_quality == null then 0 else .mapping_quality end ] | @tsv'  | sed s/null/0/g | sort >$output/vg-ref-se.pos
join $output/true.pos $output/vg-ref-se.pos | ~/vg/scripts/pos_compare.py >$output/vg-ref-se.compare

# By vg-pan:
echo vg pan paired mappping
time vg map -iG $output/sim.gam -x $pan_xg -g $pan_gcsa -t 32 | vg annotate -x $pan_xg -p -a - | vg view -a - | pv -l | jq -c -r '[.name, .refpos[0].name, .refpos[0].offset, if .mapping_quality == null then 0 else .mapping_quality end ] | @tsv'  | sed s/null/0/g | sort >$output/vg-pan-pe.pos
join $output/true.pos $output/vg-pan-pe.pos | ~/vg/scripts/pos_compare.py >$output/vg-pan-pe.compare
echo vg pan single mappping
time vg map -G $output/sim.gam -x $pan_xg -g $pan_gcsa -t 32 | vg annotate -x $pan_xg -p -a - | vg view -a - | pv -l | jq -c -r '[.name, .refpos[0].name, .refpos[0].offset, if .mapping_quality == null then 0 else .mapping_quality end ] | @tsv'  | sed s/null/0/g | sort >$output/vg-pan-se.pos
join $output/true.pos $output/vg-pan-se.pos | ~/vg/scripts/pos_compare.py >$output/vg-pan-se.compare

# Now we combine the various positions into one table

echo combining results
( cat $output/bwa-pe.compare | awk 'BEGIN { OFS="\t"; print "correct", "mq", "aligner"; } { print $2, $3, "bwa.mem.pe" }' ;
  cat $output/bwa-se.compare | awk 'BEGIN { OFS="\t"} { print $2, $3, "bwa.mem.se" }' ;
  cat $output/vg-ref-pe.compare | awk 'BEGIN { OFS="\t"} { print $2, $3, "vg.ref.pe" }' ;
  cat $output/vg-ref-se.compare | awk 'BEGIN { OFS="\t"} { print $2, $3, "vg.ref.se" }' ;
  cat $output/vg-pan-pe.compare | awk 'BEGIN { OFS="\t"} { print $2, $3, "vg.pan.pe" }' ;
  cat $output/vg-pan-se.compare | awk 'BEGIN { OFS="\t"} { print $2, $3, "vg.pan.se" }') >$output/results-$id.tsv

# This can then be rendered using scripts in the vg repo
echo rendering ROC
~/vg/scripts/roc.R $output/results-$id.tsv $output/roc-$id.pdf
echo rendering QQ
~/vg/scripts/qq.R $output/results-$id.tsv $output/qq-$id.pdf
