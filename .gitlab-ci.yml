# The VG tests are going to use toil-vg.
# toil-vg needs to be able to mount paths it can see into Docker containers.
# There's no good way to do that when running Docker containers as siblings of a container containing toil-vg.
# So we either have to genuinely nest Docker inside another Docker, or we have to run the build on the real host.

before_script:
  - whoami
  - sudo apt-get -q -y update
  # Make sure we have some curl stuff for pycurl which we need for some Python stuff
  - sudo apt-get -q -y install docker.io python-pip python-virtualenv libssl-dev libcurl4-openssl-dev python-dev
  - cat /etc/hosts
  - docker info
  
# We have two pipeline stages: build to make a Docker, and test to run tests.
# TODO: make test stage parallel
stages:
  - build
  - test
  - report
  

# We define one job to do the build
build-job:
  stage: build
  script: "bash vgci/vgci.sh -t None -d vgci-docker-vg-local.tar.gz"
  artifacts:
    paths:
      - vgci-docker-vg-local.tar.gz
    expire_in: 1 week
    
# We define a second follow-on phase to run the tests
# This could be multiple jobs but for now it is just one
test-job:
  stage: test
  # Pass artifacts from build (same as default)
  dependencies: 
    - build-job
  script: "bash vgci/vgci.sh -D vgci-docker-vg-local.tar.gz -j junit.xml -H"
  artifacts:
    # Let Gitlab see the junit report
    reports:
      junit: junit.xml
    expire_in: 3 months

# We have a final job in the last stage to compose an HTML report
report-job:
  stage: report
  # Only pass artifacts from test and not build
  dependencies: 
    - test-job
  script: "bash vgci/vgci.sh -J junit.xml"
   
  
