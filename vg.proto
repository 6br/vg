package vg;


// *Graphs* are collections of nodes and edges
// They can represent subgraphs of larger graphs
// or be wholly-self-sufficient.
// Protobuf memory limits of 67108864 bytes mean we typically keep the size
// of them small generating graphs as collections of smaller subgraphs.
//
message Graph {
    repeated Node node = 1;
    repeated Edge edge = 2;
    repeated Path path = 3;
}

// *Nodes* store sequence data and also links to other nodes.
// The graph is doubly-linked via IDs in prev/next fields in the Node objects.
//
message Node {
    optional string sequence = 1;   // sequence
    optional string name = 2;  // a name provides an identifier
    optional int64 id = 3;     // ids are critical, and unique within a graph
    optional bytes data = 4;   // arbitrary data
    optional Annotation annotation = 5;
}

// *Edges* describe linkages between nodes. They are directed: from=prev, to=next.
//
message Edge {
    optional int64 from = 1; // ID of upstream node
    optional int64 to = 2;   // ID of downstream node
    optional bytes data = 3; // arbitrary data
    optional Annotation annotation = 4;
}

// sequencing-specific annotations
message Annotation {
    optional int32 length = 1;
    optional int32 quality = 2;
    optional int32 coverage = 3;
    optional int32 forward = 4;
    optional int32 reverse = 5;
    optional int32 left = 6;
    optional int32 right = 7;
}

// *Edits* describe how to generate a new string from elements
// in the graph. To determine the new string, just walk the series of edits,
// stepping from_length distance in the basis node, and to_length in the
// novel element, replacing from_length in the basis node with the sequence.
//
// *matches* from_length == to_length, or from_length > 0 and offset unset
// *snps* from_length == to_length; sequence = alt
// *deletions* from_length > to_length; sequence may be unset or empty
// *insertions* from_length < to_length; sequence contains relative insertion
// *skip* from_length == 0, to_length > 0; implies "soft clip" or sequence skip
//
message Edit {
    optional int32 from_length = 1; // length in target/ref
    optional int32 to_length = 2; // length in read/alt
    optional string sequence = 3;
}

// A Mapping defines the relationship between a node in system and another entity.
// An empty edit list implies complete match.
//
message Mapping {
    optional int64 node_id = 1; // node id in graph
    repeated Edit edit = 2; // series of edit to transform to region in read/alt
}

/*
// would describe transformation between two graphs
message GraphMapping {
    optional int64 ref_node_id = 1;
    optional int32 ref_position = 2;
    optional int64 alt_node_id = 3;
    optional int32 alt_position = 4;
    repeated Edit edit = 5;
}
*/

// Paths are walks through nodes defined by a series of edits.
// They can be used to represent:
//    - haplotypes
//    - mappings of reads, or alignments, by including edits
//    - relationships between nodes
//    - annotations from other data sources, such as:
//          genes, exons, motifs, transcripts, peaks
//
message Path {
    optional int32 position = 1; // position in node of the first mapping
    optional string name = 2;
    repeated Mapping mapping = 3;
}

// Alignments link query strings, such as other genomes or reads, to paths.
//
message Alignment {
    optional string sequence = 1;
    optional Path path = 2;
    optional string name = 3;
    optional bytes quality = 4;
    optional int32 mapping_quality = 5;
    optional int32 score = 6;
    optional int32 query_position = 7;
    optional bool is_reverse = 8; // true if original sequence lies in the 3'->5' orientation
    optional string sample_name = 9;
    optional string read_group = 10;
    // fragments are encoded in a nested way
    // space can be saved when this is repeated for both pairs by using semantics in which
    // alignments nested within this field only encode 
    optional Alignment fragment_prev = 11;
    optional Alignment fragment_next = 12;
    // reference-relative mapping (?)
    // identity of graph we mapped against
    optional bytes data = 13;
}

// Fragments represent the library fragments that yield pairs of alignments
// or possibly a series of small alignments generated by a strobed read
message Fragment {
    repeated Alignment alignment = 1;
}

// used to specify kmer matches against a given node
// the context of this is dependent on implementation, use in db, etc.
message KmerMatch {
    optional string sequence = 1;
    optional int64 node_id = 2;
    optional sint32 position = 3;
}
